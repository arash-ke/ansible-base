#!/bin/bash

pattern=''
query_type='git'


me="$(realpath $0)"
me_name=$(basename $me)
me_dir=$(dirname $me)

EXTRA_VARS=$ANSIBLE_L_EXTRA_VARS

###############################################################################
#   Pars Args
###############################################################################
# Parse ARGS BEGIN
declare -a POSITIONAL
declare -a module_args
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
    -p|--pattern)
        pattern="${2}"
        shift # past argument
        shift # past value
    ;;
    -g|--git)
        query_type="git"
        shift # past argument
    ;;
    -f|--find)
        query_type="find"
        shift # past argument
    ;;
    --*)
        var_name=${key#"--"}
        declare ${var_name}=$2
        echo "$var_name => ${!var_name}"
        shift # past argument
        shift # past value
    ;;
    *)
        # echo $key
        POSITIONAL+=("$1")
        shift # past argument
    ;;
    esac
done
# set -- "${POSITIONAL[@]}" # restore positional parameters
# Parse ARGS END

function get_git() {
    if [ -z "$pattern" ]; then
        pattern="secret"
    fi
    git diff --name-only --staged | grep -Ee "$pattern" 
}

function get_find() {
    if [ -z "$pattern" ]; then
        pattern="*secret*.yml"
    fi
    find . -type f -name "$pattern"
}

function check_git() {
    local res=$(git diff --cached  $1 | grep -cE '^\+\$ANSIBLE_VAULT;')
    return $res
}

function check_find() {
    local res=$(grep -cE '^\$ANSIBLE_VAULT;' $1)
    return $res
}

secrets=$(get_$query_type)
total=0
notencrypted=0
notfound=0
encrypted=0
for i in $secrets; do
    if [ "`realpath $i`" == "`realpath $me`" ]; then
        echo "Skipping ourselves..."
        continue
    fi
    total=$((total+1))
    echo -n "$i -> "
    is_secret=-1
    if [ -f "$i" ]; then
        check_$query_type $i
        is_secret=$?
        # echo -n "found $is_secret "
    fi
    if [ $is_secret -ge 1 ]; then
        echo -e "\e[32mENCRYPTED\e[0m"
        encrypted=$((encrypted+1))
    elif [ $is_secret -lt 0 ]; then
        echo -e "\e[33mNot Found\e[0m"
        notfound=$((notfound+1))
    else
        echo -e "\e[31mNot Encrypted / Commited\e[0m"
        notencrypted=$((notencrypted+1))
    fi
done

echo -e "Total: $total, \e[32mEncrypted\e[0m: $encrypted, \e[33mNot Found\e[0m $notfound, \e[31mNot Encrypted\e[0m: $notencrypted"

exit $notencrypted